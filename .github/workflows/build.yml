name: build eosio contracts

on:
    push:
        branches:
            - main
            - "test/*"
    pull_request:
        types: [assigned, opened, synchronize, reopened, labeled]
        paths:
            - "CMakeLists.txt"
            - "contracts/**"
            - "external/CMakeLists.txt"
            - "libraries/**"
            - "native/**"
            - "programs/**"
            - "wasm/**"
            - ".github/workflows/build.yml"

jobs:
    build:
        name: Build Eden Community Contracts and WASMs
        runs-on: ubuntu-latest
        container: ghcr.io/eoscommunity/eden-builder:latest

        steps:
            - name: âœ… Checkout code
              uses: actions/checkout@v2

            - name: Prepare ccache timestamp
              id: ccache_cache_timestamp
              shell: cmake -P {0}
              run: |
                  string(TIMESTAMP current_date "%Y-%m-%d-%H-%M-%S" UTC)
                  message("::set-output name=timestamp::${current_date}")

            - name: show_cache
              id: show_cache
              run: echo "${{ runner.os }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}"

            - name: ccache cache files
              uses: actions/cache@v1.1.0
              with:
                  path: .ccache
                  key: ${{ runner.os }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
                  restore-keys: |
                      ${{ runner.os }}-ccache-

            - name: ðŸ›  Build
              run: |
                  set -e
                  export CCACHE_DIR=${GITHUB_WORKSPACE}/.ccache
                  echo =====
                  ccache -s
                  echo =====

                  git submodule update --init --recursive
                  mkdir build
                  cd build
                  cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DSKIP_TS=Yes -DEDEN_ATOMIC_ASSETS_ACCOUNT=atomicassets -DEDEN_ATOMIC_MARKET_ACCOUNT=atomicmarket -DEDEN_SCHEMA_NAME=members ..
                  make -j$(nproc)

                  tar czf clsdk.tar.gz clsdk

                  echo =====
                  ccache -s
                  echo =====

            - name: ðŸ§ª Run tests with CTest
              run: cd build && ctest -j$(nproc) -V

            - name: ðŸ“ƒ Upload clsdk
              uses: actions/upload-artifact@v2
              with:
                  name: clsdk
                  path: |
                      build/clsdk.tar.gz

            - name: ðŸ“ƒ Upload Eden Smart Contract
              uses: actions/upload-artifact@v2
              with:
                  name: Eden Smart Contract
                  path: |
                      build/eden.abi
                      build/eden.wasm
